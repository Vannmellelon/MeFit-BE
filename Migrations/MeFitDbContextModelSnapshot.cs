// <auto-generated />
using System;
using MeFit_BE.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MeFit_BE.Migrations
{
    [DbContext(typeof(MeFitDbContext))]
    partial class MeFitDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MeFit_BE.Models.Domain.GoalDomain.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Achieved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkoutProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkoutProgramId");

                    b.ToTable("Goal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Achieved = false,
                            EndDate = new DateTime(2022, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            WorkoutProgramId = 1
                        },
                        new
                        {
                            Id = 2,
                            Achieved = true,
                            EndDate = new DateTime(2022, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2,
                            WorkoutProgramId = 2
                        },
                        new
                        {
                            Id = 3,
                            Achieved = true,
                            EndDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3,
                            WorkoutProgramId = 3
                        });
                });

            modelBuilder.Entity("MeFit_BE.Models.Domain.GoalDomain.SubGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Achieved")
                        .HasColumnType("bit");

                    b.Property<int>("GoalId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkoutId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("SubGoal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Achieved = true,
                            GoalId = 1,
                            WorkoutId = 1
                        },
                        new
                        {
                            Id = 2,
                            Achieved = false,
                            GoalId = 2,
                            WorkoutId = 2
                        },
                        new
                        {
                            Id = 3,
                            Achieved = true,
                            GoalId = 3,
                            WorkoutId = 3
                        },
                        new
                        {
                            Id = 4,
                            Achieved = false,
                            GoalId = 2,
                            WorkoutId = 1
                        });
                });

            modelBuilder.Entity("MeFit_BE.Models.Domain.UserDomain.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PostalCode")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.Property<string>("PostalPlace")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Street")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Norway",
                            PostalCode = 2849,
                            PostalPlace = "Oslo",
                            Street = "Karl Johans gate"
                        },
                        new
                        {
                            Id = 2,
                            Country = "Norway",
                            PostalCode = 9376,
                            PostalPlace = "Bergen",
                            Street = "Lilleveien"
                        },
                        new
                        {
                            Id = 3,
                            Country = "Norway",
                            PostalCode = 3689,
                            PostalPlace = "Kautokeino",
                            Street = "Storeveien"
                        });
                });

            modelBuilder.Entity("MeFit_BE.Models.Domain.UserDomain.ContributorRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("RequestingUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestingUserId");

                    b.ToTable("ContributorRequests");
                });

            modelBuilder.Entity("MeFit_BE.Models.Domain.UserDomain.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Disabilities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("MedicalConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Profile");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            Height = 170,
                            UserId = 1,
                            Weight = 89
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            Height = 145,
                            UserId = 2,
                            Weight = 150
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            Disabilities = "Wheelchair-bound",
                            Height = 164,
                            UserId = 3,
                            Weight = 78
                        });
                });

            modelBuilder.Entity("MeFit_BE.Models.Domain.UserDomain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FitnessLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsContributor")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RestrictedCategories")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "kari.nordmann@gmail.com",
                            FirstName = "Kari",
                            IsAdmin = true,
                            IsContributor = true,
                            LastName = "Nordmann"
                        },
                        new
                        {
                            Id = 2,
                            Email = "ola.hansen@gmail.com",
                            FirstName = "Ola",
                            IsAdmin = false,
                            IsContributor = true,
                            LastName = "Hansen"
                        },
                        new
                        {
                            Id = 3,
                            Email = "else.berg@gmail.com",
                            FirstName = "Else",
                            IsAdmin = false,
                            IsContributor = false,
                            LastName = "Berg"
                        },
                        new
                        {
                            Id = 9,
                            Email = "anneelarsen98@gmail.com",
                            FirstName = "Anne E.",
                            IsAdmin = false,
                            IsContributor = true,
                            LastName = "Larsen"
                        });
                });

            modelBuilder.Entity("MeFit_BE.Models.Domain.WorkoutDomain.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("ContributorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContributorId");

                    b.ToTable("Exercise");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Core",
                            ContributorId = 1,
                            Description = "Lay on your back with your hands behind your head, and move your upper body up and down.",
                            Image = "https://us.123rf.com/450wm/lioputra/lioputra2011/lioputra201100006/158485483-man-doing-sit-ups-exercise-abdominals-exercise-flat-vector-illustration-isolated-on-white-background.jpg?ver=6",
                            Name = "Crunch"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Arms",
                            ContributorId = 1,
                            Description = "Hands on the floor. Straighten out your body and lift yourself down to the floor and back up by bending you arms.",
                            Name = "Push-up",
                            Video = "https://youtu.be/uCNgB_rU3IQ?t=5"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Full body",
                            ContributorId = 2,
                            Description = "Lay down on the floor. Then lift and hold yourself up on your elbows and toes. Hold and breath.",
                            Name = "Plank",
                            Video = "https://youtu.be/HW4yjoCkbm0?t=5"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Stamina",
                            ContributorId = 2,
                            Description = "Jump up and down while opening and closing your legs and lifting your arms over your head.",
                            Name = "Jumping Jacks"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Arms",
                            ContributorId = 9,
                            Description = "Adjust seat and weights to an approperiate level. Grab handles, your elbows should be parallell to the floor. Push handles away from your chest by extending your elbows all the way. Make sure your back remains in contact with the backrest throughout. Pull your arms back towards you with controll. Repeat.",
                            Name = "Chest-press Machine",
                            Video = "https://youtu.be/IbeA5ypeMns?t=5"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Arms",
                            ContributorId = 9,
                            Description = "Row, row, row your boat.",
                            Name = "Rowing Machine",
                            Video = "https://youtu.be/g2Q-etHs9LI?t=4"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Arms",
                            ContributorId = 9,
                            Description = "Adjust seat and weights to an approperiate level. Grab handles, your elbows should point to the floor. Lift the handles by extending your elbows all the way. Make sure your lower back remains in contact with the backrest throughout. Lower arms with controll. Repeat.",
                            Name = "Seated Shoulder-press Machine",
                            Video = "https://youtu.be/OD5pz7-703U"
                        },
                        new
                        {
                            Id = 10,
                            Category = "Arms",
                            ContributorId = 9,
                            Description = "Lie down on your back on the bench. Your feet should rest flat on the ground. Grasp the bar, positioning your hands slightly wider than your shoulders. Lift the bar and hold it over your chest. Slowly lower the bar towards your chest. Push the bar away from your chest, until your arms are fully extended. Repeat",
                            Image = "https://image.shutterstock.com/image-illustration/closegrip-barbell-bench-press-3d-260nw-430936051.jpg",
                            Name = "Bench Press"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Legs",
                            ContributorId = 9,
                            Description = "Stand with your feet shoulder-width apart. Grasp the bar with your hands just outside your legs. Lift the bar by driving your hips forward, keeping a flat back. Lower the bar with controll. Repeat.",
                            Image = "https://cdn.mos.cms.futurecdn.net/pcDfKtAmMLgLLbXc8sSAkF-970-80.jpg.webp",
                            Name = "Deadlift",
                            Video = "https://youtu.be/ABga0-lEY58?t=5"
                        },
                        new
                        {
                            Id = 11,
                            Category = "Arms",
                            ContributorId = 9,
                            Description = "Grasp the two bars. Extend your arms so that they support your full weight, your legs should be hanging. Lower your body down by bending your elbows. Throughout the exercise, your elbows should be in line with your wrists. Your shoulders should be almost parallell with your elbows before pushing your body up again. Repeat.",
                            Image = "https://upload.wikimedia.org/wikipedia/commons/thumb/5/59/Dipexercise.svg/300px-Dipexercise.svg.png",
                            Name = "Dips"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Arms",
                            ContributorId = 9,
                            Description = "Grab onto the bar and hang with your arms fully extended. Pull yourself up, with controll, untill your chin is above the bar. Try to keep the rest of your body still, be mindfull not to bend your hips or knees. Slowly lower yourself down into the starting position, with controll. Repeat.",
                            Image = "https://evofitness.no/wp-content/uploads/2019/12/pullupfront.png__666x666_q85_subsampling-2.jpeg",
                            Name = "Pull Up"
                        });
                });

            modelBuilder.Entity("MeFit_BE.Models.Domain.WorkoutDomain.Set", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("ExerciseRepetitions")
                        .HasColumnType("int");

                    b.Property<int?>("WorkoutId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("Set");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExerciseId = 1,
                            ExerciseRepetitions = 20,
                            WorkoutId = 1
                        },
                        new
                        {
                            Id = 2,
                            ExerciseId = 2,
                            ExerciseRepetitions = 10,
                            WorkoutId = 2
                        },
                        new
                        {
                            Id = 3,
                            ExerciseId = 3,
                            ExerciseRepetitions = 1,
                            WorkoutId = 3
                        },
                        new
                        {
                            Id = 4,
                            ExerciseId = 4,
                            ExerciseRepetitions = 30,
                            WorkoutId = 2
                        },
                        new
                        {
                            Id = 5,
                            ExerciseId = 5,
                            ExerciseRepetitions = 15,
                            WorkoutId = 4
                        },
                        new
                        {
                            Id = 6,
                            ExerciseId = 6,
                            ExerciseRepetitions = 15,
                            WorkoutId = 4
                        },
                        new
                        {
                            Id = 7,
                            ExerciseId = 7,
                            ExerciseRepetitions = 15,
                            WorkoutId = 4
                        },
                        new
                        {
                            Id = 8,
                            ExerciseId = 8,
                            ExerciseRepetitions = 12,
                            WorkoutId = 5
                        },
                        new
                        {
                            Id = 9,
                            ExerciseId = 9,
                            ExerciseRepetitions = 12,
                            WorkoutId = 5
                        },
                        new
                        {
                            Id = 10,
                            ExerciseId = 10,
                            ExerciseRepetitions = 12,
                            WorkoutId = 6
                        },
                        new
                        {
                            Id = 11,
                            ExerciseId = 11,
                            ExerciseRepetitions = 12,
                            WorkoutId = 6
                        });
                });

            modelBuilder.Entity("MeFit_BE.Models.Domain.WorkoutDomain.Workout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("ContributorId")
                        .HasColumnType("int");

                    b.Property<string>("Difficulty")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ContributorId");

                    b.ToTable("Workout");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Core",
                            ContributorId = 1,
                            Difficulty = "Beginner",
                            Name = "Strengthify"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Stamina",
                            ContributorId = 1,
                            Difficulty = "Expert",
                            Name = "Stamina Builder"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Full body",
                            ContributorId = 2,
                            Difficulty = "Intermediate",
                            Name = "Fitness"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Arms",
                            ContributorId = 9,
                            Difficulty = "Beginner",
                            Name = "Machine Trio"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Full body",
                            ContributorId = 9,
                            Difficulty = "Intermediate",
                            Name = "The Compound Collection 1"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Arms",
                            ContributorId = 9,
                            Difficulty = "Intermediate",
                            Name = "The Compound Collection 2"
                        });
                });

            modelBuilder.Entity("MeFit_BE.Models.Domain.WorkoutDomain.WorkoutProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("ContributorId")
                        .HasColumnType("int");

                    b.Property<string>("Difficulty")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ContributorId");

                    b.ToTable("WorkoutProgram");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Full body",
                            ContributorId = 1,
                            Difficulty = "Beginner",
                            Name = "Hot and Heavy"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Flexibility",
                            ContributorId = 1,
                            Difficulty = "Intermediate",
                            Name = "The Wellness Yourney"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Stamina",
                            ContributorId = 2,
                            Difficulty = "Expert",
                            Name = "The Runner"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Full body",
                            ContributorId = 9,
                            Difficulty = "Beginner",
                            Name = "Nice and Easy"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Full body",
                            ContributorId = 9,
                            Difficulty = "Intermediate",
                            Name = "The Compound Collection"
                        });
                });

            modelBuilder.Entity("WorkoutWorkoutProgram", b =>
                {
                    b.Property<int>("WorkoutProgramsId")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutsId")
                        .HasColumnType("int");

                    b.HasKey("WorkoutProgramsId", "WorkoutsId");

                    b.HasIndex("WorkoutsId");

                    b.ToTable("WorkoutWorkoutProgram");
                });

            modelBuilder.Entity("MeFit_BE.Models.Domain.GoalDomain.Goal", b =>
                {
                    b.HasOne("MeFit_BE.Models.Domain.UserDomain.User", "User")
                        .WithMany("Goals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeFit_BE.Models.Domain.WorkoutDomain.WorkoutProgram", "WorkoutProgram")
                        .WithMany()
                        .HasForeignKey("WorkoutProgramId");

                    b.Navigation("User");

                    b.Navigation("WorkoutProgram");
                });

            modelBuilder.Entity("MeFit_BE.Models.Domain.GoalDomain.SubGoal", b =>
                {
                    b.HasOne("MeFit_BE.Models.Domain.GoalDomain.Goal", "Goal")
                        .WithMany("SubGoals")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeFit_BE.Models.Domain.WorkoutDomain.Workout", "Workout")
                        .WithMany()
                        .HasForeignKey("WorkoutId");

                    b.Navigation("Goal");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("MeFit_BE.Models.Domain.UserDomain.ContributorRequest", b =>
                {
                    b.HasOne("MeFit_BE.Models.Domain.UserDomain.User", "RequestingUser")
                        .WithMany()
                        .HasForeignKey("RequestingUserId");

                    b.Navigation("RequestingUser");
                });

            modelBuilder.Entity("MeFit_BE.Models.Domain.UserDomain.Profile", b =>
                {
                    b.HasOne("MeFit_BE.Models.Domain.UserDomain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("MeFit_BE.Models.Domain.UserDomain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MeFit_BE.Models.Domain.WorkoutDomain.Exercise", b =>
                {
                    b.HasOne("MeFit_BE.Models.Domain.UserDomain.User", "Contributor")
                        .WithMany()
                        .HasForeignKey("ContributorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contributor");
                });

            modelBuilder.Entity("MeFit_BE.Models.Domain.WorkoutDomain.Set", b =>
                {
                    b.HasOne("MeFit_BE.Models.Domain.WorkoutDomain.Exercise", "Exercise")
                        .WithMany("Sets")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MeFit_BE.Models.Domain.WorkoutDomain.Workout", "Workout")
                        .WithMany("Sets")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Exercise");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("MeFit_BE.Models.Domain.WorkoutDomain.Workout", b =>
                {
                    b.HasOne("MeFit_BE.Models.Domain.UserDomain.User", "Contributor")
                        .WithMany()
                        .HasForeignKey("ContributorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contributor");
                });

            modelBuilder.Entity("MeFit_BE.Models.Domain.WorkoutDomain.WorkoutProgram", b =>
                {
                    b.HasOne("MeFit_BE.Models.Domain.UserDomain.User", "Contributor")
                        .WithMany()
                        .HasForeignKey("ContributorId");

                    b.Navigation("Contributor");
                });

            modelBuilder.Entity("WorkoutWorkoutProgram", b =>
                {
                    b.HasOne("MeFit_BE.Models.Domain.WorkoutDomain.WorkoutProgram", null)
                        .WithMany()
                        .HasForeignKey("WorkoutProgramsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeFit_BE.Models.Domain.WorkoutDomain.Workout", null)
                        .WithMany()
                        .HasForeignKey("WorkoutsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeFit_BE.Models.Domain.GoalDomain.Goal", b =>
                {
                    b.Navigation("SubGoals");
                });

            modelBuilder.Entity("MeFit_BE.Models.Domain.UserDomain.User", b =>
                {
                    b.Navigation("Goals");
                });

            modelBuilder.Entity("MeFit_BE.Models.Domain.WorkoutDomain.Exercise", b =>
                {
                    b.Navigation("Sets");
                });

            modelBuilder.Entity("MeFit_BE.Models.Domain.WorkoutDomain.Workout", b =>
                {
                    b.Navigation("Sets");
                });
#pragma warning restore 612, 618
        }
    }
}
